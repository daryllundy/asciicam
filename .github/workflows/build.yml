name: build
on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        go-version: [1.23]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    env:
      GO111MODULE: "on"
      CGO_ENABLED: "1"
      # Basic OpenCV modules only (no contrib/aruco)
      CGO_CFLAGS: "-I/usr/include/opencv4"
      CGO_LDFLAGS: "-lopencv_core -lopencv_imgproc -lopencv_imgcodecs -lopencv_videoio"
    steps:
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install OpenCV
        run: |
          sudo apt-get update
          # Install only core OpenCV modules (no contrib to avoid ArUco issues)
          sudo apt-get install -y libopencv-dev pkg-config
          # Verify OpenCV installation and get version
          opencv_version=$(pkg-config --modversion opencv4 2>/dev/null || pkg-config --modversion opencv 2>/dev/null || echo "unknown")
          echo "OpenCV version: $opencv_version"
          # Set environment for gocv build
          echo "PKG_CONFIG_PATH=$(pkg-config --variable=pc_path pkg-config)" >> $GITHUB_ENV
          # Disable problematic modules in gocv
          echo "GOCV_DISABLE_ARUCO=1" >> $GITHUB_ENV

      - name: Download Go modules
        run: go mod download
      
      - name: Test gocv import
        env:
          CGO_ENABLED: ${{ env.CGO_ENABLED }}
          CGO_CFLAGS: ${{ env.CGO_CFLAGS }}
          CGO_LDFLAGS: ${{ env.CGO_LDFLAGS }}
        run: |
          # Test if gocv can be imported without ArUco issues
          go list -m gocv.io/x/gocv
          echo "Testing basic gocv import..."
          cat > test_gocv.go << 'EOF'
          package main
          import (
              "fmt"
              "gocv.io/x/gocv"
          )
          func main() {
              fmt.Println("gocv version:", gocv.Version())
          }
          EOF
          go run test_gocv.go || echo "gocv test failed - continuing anyway"

      - name: Build
        env:
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
          CGO_ENABLED: ${{ env.CGO_ENABLED }}
          CGO_CFLAGS: ${{ env.CGO_CFLAGS }}
          CGO_LDFLAGS: ${{ env.CGO_LDFLAGS }}
        run: |
          # Build the main application
          go build -v -o asciicam ./cmd/asciicam
          # Verify binary was created
          ls -la asciicam

      - name: Test
        env:
          CGO_ENABLED: ${{ env.CGO_ENABLED }}
          CGO_CFLAGS: ${{ env.CGO_CFLAGS }}
          CGO_LDFLAGS: ${{ env.CGO_LDFLAGS }}
        run: go test ./...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        env:
          CGO_ENABLED: ${{ env.CGO_ENABLED }}
          CGO_CFLAGS: ${{ env.CGO_CFLAGS }}
          CGO_LDFLAGS: ${{ env.CGO_LDFLAGS }}
        with:
          version: latest
          args: --config .golangci-soft.yml --issues-exit-code=0
          only-new-issues: true

      - name: Run golangci-lint (all linters)
        uses: golangci/golangci-lint-action@v4
        env:
          CGO_ENABLED: ${{ env.CGO_ENABLED }}
          CGO_CFLAGS: ${{ env.CGO_CFLAGS }}
          CGO_LDFLAGS: ${{ env.CGO_LDFLAGS }}
        with:
          version: latest
          args: --issues-exit-code=0
          only-new-issues: true
